// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZStore_BLL.Models;

#nullable disable

namespace ZStore_BLL.Migrations
{
    [DbContext(typeof(ZStore_SampleContext))]
    [Migration("20240610115148_DBInit")]
    partial class DBInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ZStore_BLL.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<int?>("DefaultAddressId")
                        .HasColumnType("int")
                        .HasColumnName("default_address_id");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("first_name");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("mobile");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("RegisteredAt")
                        .HasColumnType("datetime")
                        .HasColumnName("registered_at");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("AccountId");

                    b.HasIndex("DefaultAddressId");

                    b.HasIndex(new[] { "Mobile" }, "UQ__account__A32E2E1C0C231681")
                        .IsUnique()
                        .HasFilter("[mobile] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__account__AB6E61643352307C")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.AccountRole", b =>
                {
                    b.Property<int>("AccountRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("account_role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountRoleId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("AccountRoleId");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("accountRole", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("country");

                    b.Property<string>("Detail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("detail");

                    b.Property<string>("District")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("district");

                    b.Property<string>("Province")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("province");

                    b.Property<string>("Ward")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ward");

                    b.Property<string>("Zip")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("zip");

                    b.HasKey("AddressId");

                    b.HasIndex("AccountId");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.AuditLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("log_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<string>("Action")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("action")
                        .HasDefaultValueSql("(N'Default Action')");

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("ntext")
                        .HasColumnName("content")
                        .HasDefaultValueSql("(N'Default Audit Log Content')");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Entity")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("entity")
                        .HasDefaultValueSql("(N'Default Entity')");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("entity_id");

                    b.Property<string>("IpAddress")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ip_address")
                        .HasDefaultValueSql("(N'0.0.0.0')");

                    b.Property<string>("UserAgent")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("user_agent")
                        .HasDefaultValueSql("(N'Default Browser')");

                    b.HasKey("LogId")
                        .HasName("PK__auditLog__9E2397E055ED338B");

                    b.HasIndex("AccountId");

                    b.ToTable("auditLog", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("ntext")
                        .HasColumnName("content")
                        .HasDefaultValueSql("(N'Default Category Content')");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MetaTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("metaTitle")
                        .HasDefaultValueSql("(N'Default Category Meta Title')");

                    b.Property<int?>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("parent_category_id");

                    b.Property<string>("Sku")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sku")
                        .HasDefaultValueSql("(N'DEFAULTCATEGORY')");

                    b.Property<string>("Slug")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug")
                        .HasDefaultValueSql("(N'/default-category-slug')");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("(N'Default Category Title')");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"), 1L, 1);

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("ntext")
                        .HasColumnName("content")
                        .HasDefaultValueSql("(N'Default Product Item Description')");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MetaTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("metaTitle")
                        .HasDefaultValueSql("(N'Default Product Item Meta Title')");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("Sku")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sku")
                        .HasDefaultValueSql("(N'ITEM')");

                    b.Property<string>("Slug")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug")
                        .HasDefaultValueSql("(N'/product/product-item')");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("(N'Default Product Item Title')");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ItemId");

                    b.HasIndex("ProductId");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.ItemImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("image_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("img_url");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ImageId")
                        .HasName("PK__itemImag__DC9AC9552A522A34");

                    b.HasIndex("ItemId");

                    b.ToTable("itemImage", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.ItemInventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("inventory_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("discount")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<decimal?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasColumnName("price")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("quantity")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("VariantCombination")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("variant_combination")
                        .HasDefaultValueSql("(N'0-0')");

                    b.HasKey("InventoryId")
                        .HasName("PK__itemInve__B59ACC49AAA72343");

                    b.HasIndex("ItemId");

                    b.ToTable("itemInventory", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.ItemVariant", b =>
                {
                    b.Property<int>("ItemVariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("item_variant_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemVariantId"), 1L, 1);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int")
                        .HasColumnName("variant_id");

                    b.HasKey("ItemVariantId");

                    b.HasIndex("ItemId");

                    b.HasIndex("VariantId");

                    b.ToTable("ItemVariant", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.HasKey("PermissionId");

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("ntext")
                        .HasColumnName("content")
                        .HasDefaultValueSql("(N'Default Product Description')");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("ItemCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("item_count")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("MetaTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("metaTitle")
                        .HasDefaultValueSql("(N'Default Product Meta Title')");

                    b.Property<string>("Sku")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sku")
                        .HasDefaultValueSql("(N'PRD')");

                    b.Property<string>("Slug")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug")
                        .HasDefaultValueSql("(N'/product/product')");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("(N'Default Product Title')");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("vendor_id");

                    b.Property<int?>("ViewTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("view_time")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TypeId");

                    b.HasIndex("VendorId");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("product_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductTypeId"), 1L, 1);

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("ntext")
                        .HasColumnName("content")
                        .HasDefaultValueSql("(N'Default Product Type Description')");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("MetaTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("metaTitle")
                        .HasDefaultValueSql("(N'Default Product Type Meta Title')");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("Sku")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sku")
                        .HasDefaultValueSql("(N'PT')");

                    b.Property<string>("Slug")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("slug")
                        .HasDefaultValueSql("(N'/type/default-product-type')");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("(N'Default Product Type Title')");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductTypeId");

                    b.ToTable("productType", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("token_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("expires_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid?>("Token")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("token");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.HasKey("TokenId")
                        .HasName("PK__refreshT__CB3C9E17043E52B5");

                    b.HasIndex("AccountId");

                    b.HasIndex("TypeId");

                    b.ToTable("refreshToken", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("content");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("RoleId");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_permission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RolePermissionId"), 1L, 1);

                    b.Property<int?>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("rolePermission", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.TokenType", b =>
                {
                    b.Property<int>("TokenTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("token_type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenTypeId"), 1L, 1);

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("(N'Default Token Type Name')");

                    b.HasKey("TokenTypeId");

                    b.ToTable("tokenType", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.Variant", b =>
                {
                    b.Property<int>("VariantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("variant_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VariantId"), 1L, 1);

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("ntext")
                        .HasColumnName("content")
                        .HasDefaultValueSql("(N'Default Variant Content')");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("(N'Default Variant Title')");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("VariantId");

                    b.ToTable("variant", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.VariantValue", b =>
                {
                    b.Property<int>("VariantValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("variant_value_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VariantValueId"), 1L, 1);

                    b.Property<string>("ImgUrl")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("img_url")
                        .HasDefaultValueSql("('https://example.com/product-variant-image.png')");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("item_id");

                    b.Property<string>("Value")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("value")
                        .HasDefaultValueSql("('Default Variant Value')");

                    b.Property<int?>("VariantId")
                        .HasColumnType("int")
                        .HasColumnName("variant_id");

                    b.HasKey("VariantValueId");

                    b.HasIndex("ItemId");

                    b.HasIndex("VariantId");

                    b.ToTable("variantValue", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vendor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"), 1L, 1);

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("ntext")
                        .HasColumnName("content")
                        .HasDefaultValueSql("(N'Default Vendor Description')");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Order")
                        .HasColumnType("int")
                        .HasColumnName("order");

                    b.Property<string>("Sku")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sku")
                        .HasDefaultValueSql("(N'VD')");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title")
                        .HasDefaultValueSql("(N'Default Vendor Title')");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("VendorId");

                    b.ToTable("vendor", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("voucher_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoucherId"), 1L, 1);

                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("code")
                        .HasDefaultValueSql("(N'VOUCHER-DEFAULT')");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("discount")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ExpiresAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("expires_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type");

                    b.Property<int?>("UsageLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("usage_limit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("UsedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("used_count")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("VoucherId");

                    b.ToTable("voucher", (string)null);
                });

            modelBuilder.Entity("ZStore_BLL.Models.Account", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Address", "DefaultAddress")
                        .WithMany("Accounts")
                        .HasForeignKey("DefaultAddressId")
                        .HasConstraintName("FK_Account_Address");

                    b.Navigation("DefaultAddress");
                });

            modelBuilder.Entity("ZStore_BLL.Models.AccountRole", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AccountRole_Account");

                    b.HasOne("ZStore_BLL.Models.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AccountRole_Role");

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Address", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Account", "Account")
                        .WithMany("Addresses")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Address_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ZStore_BLL.Models.AuditLog", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Account", "Account")
                        .WithMany("AuditLogs")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AuditLog_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Category", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK_Category_ParentCategory");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Item", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Product", "Product")
                        .WithMany("Items")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Item_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ZStore_BLL.Models.ItemImage", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Item", "Item")
                        .WithMany("ItemImages")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("FK__itemImage__item___7E37BEF6");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ZStore_BLL.Models.ItemInventory", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Item", "Item")
                        .WithMany("ItemInventories")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemInventory_Item");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ZStore_BLL.Models.ItemVariant", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Item", "Item")
                        .WithMany("ItemVariants")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_ItemVariant_Item");

                    b.HasOne("ZStore_BLL.Models.Variant", "Variant")
                        .WithMany("ItemVariants")
                        .HasForeignKey("VariantId")
                        .HasConstraintName("FK_ItemVariant_Variant");

                    b.Navigation("Item");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Product", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product_Category");

                    b.HasOne("ZStore_BLL.Models.ProductType", "Type")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Product_ProductType");

                    b.HasOne("ZStore_BLL.Models.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Product_Vendor");

                    b.Navigation("Category");

                    b.Navigation("Type");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ZStore_BLL.Models.RefreshToken", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Account", "Account")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_RefreshToken_Account");

                    b.HasOne("ZStore_BLL.Models.TokenType", "Type")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_RefreshToken_TokenType");

                    b.Navigation("Account");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ZStore_BLL.Models.RolePermission", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_RolePermission_Permission");

                    b.HasOne("ZStore_BLL.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RolePermission_Role");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ZStore_BLL.Models.VariantValue", b =>
                {
                    b.HasOne("ZStore_BLL.Models.Item", "Item")
                        .WithMany("VariantValues")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_VariantValue_Item");

                    b.HasOne("ZStore_BLL.Models.Variant", "Variant")
                        .WithMany("VariantValues")
                        .HasForeignKey("VariantId")
                        .HasConstraintName("FK_VariantValue_Variant");

                    b.Navigation("Item");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Account", b =>
                {
                    b.Navigation("AccountRoles");

                    b.Navigation("Addresses");

                    b.Navigation("AuditLogs");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Address", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Category", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Item", b =>
                {
                    b.Navigation("ItemImages");

                    b.Navigation("ItemInventories");

                    b.Navigation("ItemVariants");

                    b.Navigation("VariantValues");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Product", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ZStore_BLL.Models.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Role", b =>
                {
                    b.Navigation("AccountRoles");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("ZStore_BLL.Models.TokenType", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Variant", b =>
                {
                    b.Navigation("ItemVariants");

                    b.Navigation("VariantValues");
                });

            modelBuilder.Entity("ZStore_BLL.Models.Vendor", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
